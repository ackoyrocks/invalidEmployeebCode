<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch	http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
	xmlns:p="http://www.springframework.org/schema/p">

	<import resource="ApplicationDB.xml" />
	
	
	<!-- JobRepository and JobLauncher are configuration/setup classes -->
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />

	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
	<bean id="simpleJob" class="org.springframework.batch.core.job.SimpleJob"
		abstract="true">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<!-- ItemReader reads a complete line one by one from input file -->
	<bean id="flatFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<!-- <property name="resource" value="classpath:ExamResult.txt" /> -->
		<!-- <property name="resource" value="file:/nas/codedrop/akshay/BenefitCode/input/benefitCode_emp.csv" 
			/> -->
		<property name="resource"
			value="file:C:\Users\akanand\Workspace3\InvalidEmpBenefitCode\src\main\resources\benefitCode_emp.csv" />
		<property name="lineMapper">

			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				<property name="fieldSetMapper">
					<!-- Mapper which maps each individual items in a record to properties 
						in POJO -->
					<bean class="com.lowes.bfcode.batch.EmpBenefitCodeFieldSetMapper" />
				</property>

				<property name="lineTokenizer">
					<!-- A tokenizer class to be used when items in input record are separated 
						by specific characters -->
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="delimiter" value="," />
					</bean>
				</property>

			</bean>

		</property>

	</bean>


	<bean id="fieldExtractor"
		class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor"
		p:names="usersId,empNumber" />

	<bean id="lineAggregator"
		class="org.springframework.batch.item.file.transform.DelimitedLineAggregator"
		p:fieldExtractor-ref="fieldExtractor" />

	<bean id="csvItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter"
		p:resource="file:C:\Users\akanand\Workspace3\InvalidEmpBenefitCode\csvOutput\benefitCode_out.csv"
		p:lineAggregator-ref="lineAggregator" />
	<!-- p:resource="file:/nas/codedrop/akshay/BenefitCode/output/benefitCode_out.csv" 
		p:lineAggregator-ref="lineAggregator" /> -->





	<!-- Optional ItemProcessor to perform business logic/filtering on the input 
		records -->
	<bean id="itemProcessor" class="com.lowes.bfcode.batch.EmpBenefitCodeItemProcessor" />

	<bean id="dataItemProcessor"
		class="com.lowes.bfcode.batch.processor.BenefitCodeDBUpdItemProcessor" />
	<!-- Optional JobExecutionListener to perform business logic before and 
		after the job -->
	<bean id="jobListener" class="com.lowes.bfcode.batch.EmpBenefitCodeJobListener" />

	<bean id="users" class="com.lowes.bfcode.batch.model.EmpBenefitCode"
		scope="prototype"></bean>
	<bean id="cvsItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<!-- Read a csv file -->
		<property name="resource"
			value="file:C:\Users\akanand\Workspace3\InvalidEmpBenefitCode\csvOutput\benefitCode_out.csv" />
		<!-- <property name="resource" value="file:/nas/codedrop/akshay/BenefitCode/output/benefitCode_out.csv" 
			/> -->

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="usersId,empNumber" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<!-- map to an object -->
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="users" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="databaseItemWriter"
	 class="org.springframework.batch.item.database.JdbcBatchItemWriter">
	<!-- class="com.lowes.bfcode.batch.writer.CompositeItemWriter"> -->
		 
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[    
            UPDATE T4905_USE_EXT SET EMP_CRD_NBR_TXT='' WHERE USERS_ID in (:usersId)
                 ]]>
			</value>
		</property>
		<!-- UPDATE T4905_USE_EXT SET EMP_CRD_NBR_TXT= :empNumber WHERE USERS_ID 
			in (:usersId) with ur; UPDATE T4905_USE_EXT SET EMP_CRD_NBR_TXT='' WHERE 
			USERS_ID in (:usersId) with ur -->
		<!-- insert into Table(empNumber) values (:usersId) -->

		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

	<!-- Step will need a transaction manager -->
	<bean id="transactionManager"
		class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />

	<!-- Actual Job -->
	<batch:job id="empBenefitCodeJob">
		<batch:step id="step1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="flatFileItemReader" writer="csvItemWriter"
					processor="itemProcessor" commit-interval="10" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>
	<batch:job id="updateBenefitcodeJob" job-repository="jobRepository"
		parent="simpleJob">
		<batch:step id="step2">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="cvsItemReader" processor="dataItemProcessor"
					writer="databaseItemWriter" commit-interval="2">


				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>
</beans>			